// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hUezQ7Kcu4Vi3zRYfXUddy
// Component: uRR6v4XVc88O

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import Statistic from "../../Statistic"; // plasmic-import: 4Jw9lnOUo3vH/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hUezQ7Kcu4Vi3zRYfXUddy/projectcss
import sty from "./PlasmicNewsletters.module.css"; // plasmic-import: uRR6v4XVc88O/css

createPlasmicElementProxy;

export type PlasmicNewsletters__VariantMembers = {};
export type PlasmicNewsletters__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewsletters__VariantsArgs;
export const PlasmicNewsletters__VariantProps = new Array<VariantPropType>();

export type PlasmicNewsletters__ArgsType = {};
type ArgPropType = keyof PlasmicNewsletters__ArgsType;
export const PlasmicNewsletters__ArgProps = new Array<ArgPropType>();

export type PlasmicNewsletters__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  section?: Flex__<"section">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultNewslettersProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewsletters__RenderFunc(props: {
  variants: PlasmicNewsletters__VariantsArgs;
  args: PlasmicNewsletters__ArgsType;
  overrides: PlasmicNewsletters__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "currentEmail",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "emailIdeas",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "emails",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                function addCurrentFlag(dataArray) {
                  return dataArray.map(item => ({
                    ...item,
                    current: false
                  }));
                }
                const updatedArray = addCurrentFlag($queries.getEmails.data);
                return updatedArray;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "ideasLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getEmails: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "4be55c2a-1ab6-46d4-bf1a-cd7c4d369d80",
        userArgs: {
          filters: [$queries.getParner.data[0].id]
        },
        cacheKey: `plasmic.$.4be55c2a-1ab6-46d4-bf1a-cd7c4d369d80.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getParner: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "29fd476d-2acb-4415-8daf-b055daa954af",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.29fd476d-2acb-4415-8daf-b055daa954af.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getNewsletters: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "beb89871-b205-4d76-bd81-b581a2956592",
        userArgs: {
          filters: [$queries.getParner.data[0].id]
        },
        cacheKey: `plasmic.$.beb89871-b205-4d76-bd81-b581a2956592.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSubs: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "f9b21d8c-e700-49ef-9699-e695e0f6d07b",
        userArgs: {
          filters: [$queries.getParner.data[0].id]
        },
        cacheKey: `plasmic.$.f9b21d8c-e700-49ef-9699-e695e0f6d07b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__lvtXc)}>
            <div className={classNames(projectcss.all, sty.freeBox__ovDKg)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zg9U3
                )}
              >
                {"Newsletter"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button__wPDq7)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xCbIy
                  )}
                >
                  {"Composer"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button__z10KR)}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__snGzu
                  )}
                >
                  {"Newsletters"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button__ncfaR)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mfC
                  )}
                >
                  {"Subscribers"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button__yYZtp)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r4Ax
                  )}
                >
                  {"Settings"}
                </div>
              </AntdButton>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column___3Os38)}
            >
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__k8Qze)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.getNewsletters.data;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pBjQ0
                        )}
                        key={currentIndex}
                      >
                        <PlasmicImg__
                          data-plasmic-name={"img"}
                          data-plasmic-override={overrides.img}
                          alt={""}
                          className={classNames(sty.img)}
                          displayHeight={"162px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          loading={"lazy"}
                          src={(() => {
                            try {
                              return currentItem.image;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dVdJk
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.title;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mGrYl
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.description;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iUowx
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.directory;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cPgQ
                          )}
                        >
                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__jyyuK
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pHy62
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $queries.getSubs.data.filter(
                                        entry =>
                                          entry.newsletter_id == currentItem.id
                                      ).length;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "3,193";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__teKvw
                                )}
                              >
                                {"Subscribers"}
                              </div>
                            }
                          />

                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__wxQTi
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qIaPg
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $queries.getEmails.data.filter(
                                        entry =>
                                          entry.newsletter_id == currentItem.id
                                      ).length;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "3,193";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2Kwef
                                )}
                              >
                                {"Subscribers"}
                              </div>
                            }
                          />
                        </div>
                      </div>
                    );
                  })}
                </div>
              </section>
            </Stack__>
            <div className={classNames(projectcss.all, sty.column___6ULul)}>
              <div className={classNames(projectcss.all, sty.freeBox__hWMww)} />
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "section", "img"],
  columns: ["columns", "section", "img"],
  section: ["section", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  section: "section";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewsletters__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewsletters__VariantsArgs;
    args?: PlasmicNewsletters__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewsletters__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNewsletters__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewsletters__ArgProps,
          internalVariantPropNames: PlasmicNewsletters__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewsletters__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewsletters";
  } else {
    func.displayName = `PlasmicNewsletters.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "hUezQ7Kcu4Vi3zRYfXUddy"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicNewsletters = Object.assign(
  // Top-level PlasmicNewsletters renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicNewsletters
    internalVariantProps: PlasmicNewsletters__VariantProps,
    internalArgProps: PlasmicNewsletters__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewsletters;
/* prettier-ignore-end */
