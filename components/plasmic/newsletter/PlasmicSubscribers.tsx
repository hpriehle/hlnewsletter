// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hUezQ7Kcu4Vi3zRYfXUddy
// Component: uSIP8aqxWeLG

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hUezQ7Kcu4Vi3zRYfXUddy/projectcss
import sty from "./PlasmicSubscribers.module.css"; // plasmic-import: uSIP8aqxWeLG/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: EREPOSAXgrkR/icon

createPlasmicElementProxy;

export type PlasmicSubscribers__VariantMembers = {};
export type PlasmicSubscribers__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubscribers__VariantsArgs;
export const PlasmicSubscribers__VariantProps = new Array<VariantPropType>();

export type PlasmicSubscribers__ArgsType = {};
type ArgPropType = keyof PlasmicSubscribers__ArgsType;
export const PlasmicSubscribers__ArgProps = new Array<ArgPropType>();

export type PlasmicSubscribers__OverridesType = {
  root?: Flex__<"div">;
  select?: Flex__<typeof AntdSelect>;
  columns?: Flex__<"div">;
  section?: Flex__<"section">;
  table?: Flex__<typeof RichTable>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  table2?: Flex__<typeof RichTable>;
  chart?: Flex__<typeof SimpleChart>;
  table3?: Flex__<typeof RichTable>;
};

export interface DefaultSubscribersProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubscribers__RenderFunc(props: {
  variants: PlasmicSubscribers__VariantsArgs;
  args: PlasmicSubscribers__ArgsType;
  overrides: PlasmicSubscribers__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "emails"
      },
      {
        path: "currentEmail",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return ($queries.getLogs?.data || []).find(
                entry => entry.type === "subscribed"
              ).sub_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "emailIdeas",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "emails",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                function addCurrentFlag(dataArray) {
                  return dataArray.map(item => ({
                    ...item,
                    current: false
                  }));
                }
                const updatedArray = addCurrentFlag($queries.getEmails.data);
                return updatedArray;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "ideasLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getNewsletter.data[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "table2.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table2.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table2.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table3.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table3.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table3.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getEmails: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "4be55c2a-1ab6-46d4-bf1a-cd7c4d369d80",
        userArgs: {
          filters: [$queries.getParner.data[0].id]
        },
        cacheKey: `plasmic.$.4be55c2a-1ab6-46d4-bf1a-cd7c4d369d80.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getParner: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "29fd476d-2acb-4415-8daf-b055daa954af",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.29fd476d-2acb-4415-8daf-b055daa954af.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getNewsletter: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "beb89871-b205-4d76-bd81-b581a2956592",
        userArgs: {
          filters: [$queries.getParner.data[0].id]
        },
        cacheKey: `plasmic.$.beb89871-b205-4d76-bd81-b581a2956592.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getLogs: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "a18061e6-3ed1-4971-9417-70082bec6535",
        userArgs: {
          filters: [$queries.getParner.data[0].id]
        },
        cacheKey: `plasmic.$.a18061e6-3ed1-4971-9417-70082bec6535.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSubs: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "5269468f-04c7-45de-b10f-5fbef07b7310",
        userArgs: {
          filters: [$state.select.value]
        },
        cacheKey: `plasmic.$.5269468f-04c7-45de-b10f-5fbef07b7310.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getContacts: usePlasmicDataOp(() => {
      return {
        sourceId: "pWHUnMRkSY4jbDwrpT6q9i",
        opId: "ef2a5369-a154-4385-a19e-026a6795113e",
        userArgs: {
          path: [
            (() => {
              const contactIds = Array.from(
                new Set(
                  ($queries.getLogs?.data || [])
                    .filter(entry => entry.type === "subscribed")
                    .map(entry => entry.sub_id)
                    .map(sub_id => {
                      const subEntry = ($queries.getSubs?.data || []).find(
                        entry => entry.id == sub_id
                      );
                      return subEntry ? subEntry.contact_id : null;
                    })
                    .filter(contact_id => contact_id !== null)
                )
              );
              const idsString = contactIds.join(",");
              return `rest/v1/contacts?id=in.(${idsString})`;
            })()
          ]
        },
        cacheKey: `plasmic.$.ef2a5369-a154-4385-a19e-026a6795113e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEmail: usePlasmicDataOp(() => {
      return {
        sourceId: "pWHUnMRkSY4jbDwrpT6q9i",
        opId: "ef2a5369-a154-4385-a19e-026a6795113e",
        userArgs: {
          path: [
            (() => {
              const emailIds = ($queries.getLogs?.data || [])
                .filter(
                  entry =>
                    entry.type === "sent" &&
                    entry.sub_id == $state.table.selectedRowKey
                )
                .map(em => em.email_id);
              const uniqueEmailIds = Array.from(new Set(emailIds));
              const emailIdsString = uniqueEmailIds.join(",");
              return `rest/v1/email?id=in.(${emailIdsString})`;
            })()
          ]
        },
        cacheKey: `plasmic.$.ef2a5369-a154-4385-a19e-026a6795113e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zvn1Y)}>
            <div className={classNames(projectcss.all, sty.freeBox__rt7Oz)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__w9Kk6
                )}
              >
                {"Newsletter"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button__pBxG7)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iSgz1
                  )}
                >
                  {"Composer"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button__wkPsn)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Hjs0
                  )}
                >
                  {"Newsletters"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button___4DyDv)}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dgxW4
                  )}
                >
                  {"Subscribers"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button__pvrb8)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g4Qv
                  )}
                >
                  {"Settings"}
                </div>
              </AntdButton>
              <div className={classNames(projectcss.all, sty.freeBox__olFj2)}>
                <div className={classNames(projectcss.all, sty.freeBox__cIlzf)}>
                  {(() => {
                    try {
                      return $queries.getNewsletter.data.length == 1
                        ? false
                        : true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      defaultValue={(() => {
                        try {
                          return $queries.getNewsletter.data[0].id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onChange={generateStateOnChangeProp($state, [
                        "select",
                        "value"
                      ])}
                      options={(() => {
                        try {
                          return (() => {
                            const result = $queries.getNewsletter.data.map(
                              entry => ({
                                label: entry.title,
                                value: entry.id
                              })
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              },
                              {
                                value: "option2",
                                label: "Option 2",
                                type: "option"
                              }
                            ];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={"Select Newsletter"}
                      popupScopeClassName={sty["select__popup"]}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  ) : null}
                </div>
                <AntdButton
                  className={classNames("__wab_instance", sty.button__runeH)}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__x6Ib4
                    )}
                  >
                    {"New Email"}
                  </div>
                </AntdButton>
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__nJolG)}
            >
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__kvGlL)}>
                  {(() => {
                    try {
                      return !$queries.getContacts.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (() => {
                        const child$Props = {
                          canSelectRows: "single",
                          className: classNames("__wab_instance", sty.table),
                          data: (() => {
                            try {
                              return (() => {
                                return [
                                  ...new Map(
                                    ($queries.getLogs?.data || [])
                                      .filter(
                                        entry => entry.type === "subscribed"
                                      )
                                      .map(item => [item.sub_id, item])
                                  ).values()
                                ];
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          fields: (() => {
                            const __composite = [
                              { key: "id", fieldId: "id", isHidden: null },
                              {
                                key: "sub_id",
                                fieldId: "sub_id",
                                isHidden: null
                              },
                              {
                                key: "email_id",
                                fieldId: "email_id",
                                isHidden: null
                              },
                              { key: "type", fieldId: "type", isHidden: null },
                              {
                                key: "partner_id",
                                fieldId: "partner_id",
                                isHidden: null
                              },
                              {
                                key: "PartnerLocationId",
                                fieldId: "PartnerLocationId",
                                isHidden: null
                              },
                              {
                                key: "created_at",
                                fieldId: "created_at",
                                isHidden: null
                              },
                              { title: null, expr: null, disableSorting: null },
                              { title: null, expr: null, disableSorting: null },
                              { title: null, expr: null, disableSorting: null },
                              { title: null, expr: null, disableSorting: null },
                              { title: null, expr: null, disableSorting: null },
                              { title: null, expr: null, disableSorting: null },
                              {
                                key: "timestamp",
                                fieldId: "timestamp",
                                dataType: null,
                                dateStyle: null,
                                timeStyle: null,
                                title: null,
                                disableSorting: null
                              },
                              {
                                key: "newsletter_id",
                                fieldId: "newsletter_id",
                                isHidden: null
                              }
                            ];
                            __composite["0"]["isHidden"] = true;
                            __composite["1"]["isHidden"] = true;
                            __composite["2"]["isHidden"] = true;
                            __composite["3"]["isHidden"] = true;
                            __composite["4"]["isHidden"] = true;
                            __composite["5"]["isHidden"] = true;
                            __composite["6"]["isHidden"] = true;
                            __composite["7"]["title"] = "Subscriber";
                            __composite["7"]["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return (() => {
                                const contId = $queries.getSubs.data.find(
                                  entry => entry.id == currentItem.sub_id
                                ).contact_id;
                                return $queries.getContacts.data.response.find(
                                  entry => entry.id == contId
                                ).name;
                              })();
                            };
                            __composite["7"]["disableSorting"] = true;
                            __composite["8"]["title"] = "Email";
                            __composite["8"]["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return (() => {
                                const contId = $queries.getSubs.data.find(
                                  entry => entry.id == currentItem.sub_id
                                ).contact_id;
                                return $queries.getContacts.data.response.find(
                                  entry => entry.id == contId
                                ).email;
                              })();
                            };
                            __composite["8"]["disableSorting"] = true;
                            __composite["9"]["title"] = "Opens";
                            __composite["9"]["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return (() => {
                                return $queries.getLogs.data.filter(
                                  entry =>
                                    entry.sub_id === currentItem.sub_id &&
                                    entry.type === "opened"
                                ).length;
                              })();
                            };
                            __composite["9"]["disableSorting"] = true;
                            __composite["10"]["title"] = "Clicks";
                            __composite["10"]["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return (() => {
                                return $queries.getLogs.data.filter(
                                  entry =>
                                    entry.sub_id === currentItem.sub_id &&
                                    entry.type === "clicked"
                                ).length;
                              })();
                            };
                            __composite["10"]["disableSorting"] = true;
                            __composite["11"]["title"] = "Open Rate";
                            __composite["11"]["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return (() => {
                                return (function () {
                                  function calculateOpenRate(queries) {
                                    const filteredLogs =
                                      queries.getLogs.data.filter(
                                        entry =>
                                          entry.sub_id === currentItem.sub_id
                                      );
                                    const totalOpens = filteredLogs.filter(
                                      entry => entry.type == "opened"
                                    ).length;
                                    const totalSent = filteredLogs.filter(
                                      entry => entry.type == "sent"
                                    ).length;
                                    if (totalSent === 0) {
                                      return "0.00";
                                    }
                                    const openRate =
                                      (totalOpens / totalSent) * 100;
                                    return openRate.toFixed(2);
                                  }
                                  const openRate = calculateOpenRate($queries);
                                  console.log("Open Rate:", openRate + "%");
                                  return openRate + "%";
                                })();
                              })();
                            };
                            __composite["11"]["disableSorting"] = true;
                            __composite["12"]["title"] = "Click Rate";
                            __composite["12"]["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return (() => {
                                return (function () {
                                  function calculateOpenRate(queries) {
                                    const filteredLogs =
                                      queries.getLogs.data.filter(
                                        entry =>
                                          entry.sub_id === currentItem.sub_id
                                      );
                                    const totalOpens = filteredLogs.filter(
                                      entry => entry.type == "clicked"
                                    ).length;
                                    const totalSent = filteredLogs.filter(
                                      entry => entry.type == "sent"
                                    ).length;
                                    if (totalSent === 0) {
                                      return "0.00";
                                    }
                                    const openRate =
                                      (totalOpens / totalSent) * 100;
                                    return openRate.toFixed(2);
                                  }
                                  const openRate = calculateOpenRate($queries);
                                  console.log("Open Rate:", openRate + "%");
                                  return openRate + "%";
                                })();
                              })();
                            };
                            __composite["12"]["disableSorting"] = true;
                            __composite["13"]["dataType"] = "datetime";
                            __composite["13"]["dateStyle"] = "short";
                            __composite["13"]["timeStyle"] = "short";
                            __composite["13"]["title"] = "Subscribe Date";
                            __composite["13"]["disableSorting"] = true;
                            __composite["14"]["isHidden"] = true;
                            return __composite;
                          })(),

                          hideColumnPicker: true,
                          hideExports: true,
                          hideSearch: false,
                          onRowSelectionChanged: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          pageSize: 10,
                          pagination: (() => {
                            try {
                              return (
                                ($queries.getLogs?.data || []).filter(
                                  entry =>
                                    entry.type === "sent" &&
                                    entry.email_id === $state.currentEmail
                                ).length > 10
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          rowKey: "sub_id",
                          scopeClassName: sty["table__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table.selectedRowKeys"
                            }
                          ],
                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichTable
                            data-plasmic-name={"table"}
                            data-plasmic-override={overrides.table}
                            {...child$Props}
                          />
                        );
                      })()
                    : null}
                  {(() => {
                    try {
                      return $queries.getContacts.isLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__oEEq6)}
                      role={"img"}
                    />
                  ) : null}
                </div>
              </section>
            </Stack__>
            <div className={classNames(projectcss.all, sty.column__dcmWh)}>
              <div className={classNames(projectcss.all, sty.freeBox___9U1N8)}>
                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <AntdRadioGroup
                    data-plasmic-name={"radioGroup"}
                    data-plasmic-override={overrides.radioGroup}
                    className={classNames("__wab_instance", sty.radioGroup)}
                    defaultValue={"emails"}
                    onChange={generateStateOnChangeProp($state, [
                      "radioGroup",
                      "value"
                    ])}
                    optionType={"button"}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null },
                        { value: null, label: null }
                      ];
                      __composite["0"]["value"] = "emails";
                      __composite["0"]["label"] = "Emails";
                      __composite["1"]["value"] = "activity";
                      __composite["1"]["label"] = "Activity";
                      return __composite;
                    })()}
                    value={generateStateValueProp($state, [
                      "radioGroup",
                      "value"
                    ])}
                  >
                    <AntdRadio
                      className={classNames("__wab_instance", sty.radio__ytHh6)}
                      value={"op1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lsEb9
                        )}
                      >
                        {"Option 1"}
                      </div>
                    </AntdRadio>
                    <AntdRadio
                      className={classNames("__wab_instance", sty.radio__weRA)}
                      value={"op2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hnJtM
                        )}
                      >
                        {"Option 2"}
                      </div>
                    </AntdRadio>
                  </AntdRadioGroup>
                ) : null}
              </div>
              {(() => {
                try {
                  return $state.radioGroup.value == "emails";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__scvms)}>
                  {(() => {
                    try {
                      return true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__j98EO)}
                    >
                      {(() => {
                        try {
                          return (
                            $queries.getLogs.isLoading ||
                            $queries.getEmail.isLoading
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__w7UuO)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (
                            !$queries.getLogs.isLoading ||
                            !$queries.getEmail.isLoading
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.table2
                              ),
                              data: (() => {
                                try {
                                  return (() => {
                                    const emId =
                                      ($queries.getLogs?.data || [])
                                        .filter(
                                          entry =>
                                            entry.type === "sent" &&
                                            entry.sub_id ==
                                              $state.table.selectedRowKey
                                        )
                                        .map(em => em.email_id) || [];
                                    const result =
                                      ($queries.getEmail?.data?.response || [])
                                        .filter(
                                          entry =>
                                            entry.newsletter_id ==
                                            $state.select.value
                                        )
                                        .sort((a, b) => {
                                          const dateA = new Date(
                                            a.schedule_date
                                          );
                                          const dateB = new Date(
                                            b.schedule_date
                                          );
                                          return dateB - dateA;
                                        }) || [];
                                    return result;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              fields: (() => {
                                const __composite = [
                                  { key: "id", fieldId: "id", isHidden: null },
                                  {
                                    key: "partner_id",
                                    fieldId: "partner_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "subject",
                                    fieldId: "subject",
                                    dataType: null,
                                    disableSorting: null,
                                    title: null
                                  },
                                  {
                                    key: "html_content",
                                    fieldId: "html_content",
                                    isHidden: null
                                  },
                                  {
                                    key: "widget_form",
                                    fieldId: "widget_form",
                                    isHidden: null
                                  },
                                  {
                                    key: "widget_poll",
                                    fieldId: "widget_poll",
                                    isHidden: null
                                  },
                                  {
                                    key: "widget_referral",
                                    fieldId: "widget_referral",
                                    isHidden: null
                                  },
                                  {
                                    key: "widget_feedback",
                                    fieldId: "widget_feedback",
                                    isHidden: null
                                  },
                                  {
                                    key: "schedule_time",
                                    fieldId: "schedule_time",
                                    title: null,
                                    disableSorting: null
                                  },
                                  {
                                    key: "status",
                                    fieldId: "status",
                                    isHidden: null
                                  },
                                  {
                                    key: "tag_id",
                                    fieldId: "tag_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "template_id",
                                    fieldId: "template_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "created_at",
                                    fieldId: "created_at",
                                    isHidden: null
                                  },
                                  {
                                    key: "newsletter_id",
                                    fieldId: "newsletter_id",
                                    isHidden: null
                                  },
                                  {
                                    title: null,
                                    expr: null,
                                    disableSorting: null,
                                    dataType: null
                                  },
                                  {
                                    title: null,
                                    expr: null,
                                    disableSorting: null
                                  }
                                ];
                                __composite["0"]["isHidden"] = true;
                                __composite["1"]["isHidden"] = true;
                                __composite["2"]["dataType"] = "string";
                                __composite["2"]["disableSorting"] = true;
                                __composite["2"]["title"] = "Subject";
                                __composite["3"]["isHidden"] = true;
                                __composite["4"]["isHidden"] = true;
                                __composite["5"]["isHidden"] = true;
                                __composite["6"]["isHidden"] = true;
                                __composite["7"]["isHidden"] = true;
                                __composite["8"]["title"] = "Sent Date";
                                __composite["8"]["disableSorting"] = true;
                                __composite["9"]["isHidden"] = true;
                                __composite["10"]["isHidden"] = true;
                                __composite["11"]["isHidden"] = true;
                                __composite["12"]["isHidden"] = true;
                                __composite["13"]["isHidden"] = true;
                                __composite["14"]["title"] = "Opens";
                                __composite["14"]["expr"] = (
                                  currentItem,
                                  currentValue
                                ) => {
                                  return (() => {
                                    return $queries.getLogs.data.filter(
                                      entry =>
                                        entry.sub_id ===
                                          $state.table.selectedRowKey &&
                                        entry.email_id == currentItem.id &&
                                        entry.type === "opened"
                                    ).length;
                                  })();
                                };
                                __composite["14"]["disableSorting"] = true;
                                __composite["14"]["dataType"] = "number";
                                __composite["15"]["title"] = "Clicks";
                                __composite["15"]["expr"] = (
                                  currentItem,
                                  currentValue
                                ) => {
                                  return (() => {
                                    return $queries.getLogs.data.filter(
                                      entry =>
                                        entry.sub_id ===
                                          $state.table.selectedRowKey &&
                                        entry.email_id == currentItem.id &&
                                        entry.type === "clicked"
                                    ).length;
                                  })();
                                };
                                __composite["15"]["disableSorting"] = true;
                                return __composite;
                              })(),

                              hideColumnPicker: true,
                              hideExports: true,
                              hideSearch: true,
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table2", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table2", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table2", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table2", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                              },
                              rowActions: [],
                              scopeClassName: sty["table2__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table2",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table2",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table2.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table2.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table2.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table2.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table2"}
                                data-plasmic-override={overrides.table2}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.radioGroup.value == "activity";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___8GIpE)}
                >
                  <SimpleChart
                    data-plasmic-name={"chart"}
                    data-plasmic-override={overrides.chart}
                    className={classNames("__wab_instance", sty.chart)}
                    data={(() => {
                      const logsData = $queries.getLogs.data.filter(
                        entry => entry.sub_id === $state.table.selectedRowKey
                      );
                      const filteredLogsData = logsData;
                      const transformedArray = filteredLogsData
                        .map(entry => {
                          const date = new Date(entry.timestamp)
                            .toISOString()
                            .split("T")[0];
                          return {
                            Date: date,
                            Type: entry.type
                          };
                        })
                        .reduce((acc, entry) => {
                          if (!acc[entry.Date]) {
                            acc[entry.Date] = {
                              opened: 0,
                              clicked: 0
                            };
                          }
                          if (entry.Type === "opened") {
                            acc[entry.Date].opened++;
                          } else if (entry.Type === "clicked") {
                            acc[entry.Date].clicked++;
                          }
                          return acc;
                        }, {});
                      const splitOpensClicksPerDay = Object.keys(
                        transformedArray
                      )
                        .map(date => {
                          return {
                            Date: date,
                            Opens: transformedArray[date].opened,
                            Clicks: transformedArray[date].clicked
                          };
                        })
                        .sort((a, b) => new Date(a.Date) - new Date(b.Date));
                      return splitOpensClicksPerDay;
                    })()}
                    type={"line"}
                  />

                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.table3),
                      data: (() => {
                        try {
                          return (() => {
                            const sortedLogs = ($queries.getLogs?.data || [])
                              .filter(
                                entry =>
                                  entry.sub_id == $state.table.selectedRowKey
                              )
                              .sort((a, b) => {
                                const timestampA = new Date(
                                  a.timestamp
                                ).getTime();
                                const timestampB = new Date(
                                  b.timestamp
                                ).getTime();
                                return timestampB - timestampA;
                              });
                            return sortedLogs;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      fields: (() => {
                        const __composite = [
                          { key: "id", fieldId: "id", isHidden: null },
                          { key: "sub_id", fieldId: "sub_id", isHidden: null },
                          {
                            key: "timestamp",
                            fieldId: "timestamp",
                            dataType: null,
                            title: null,
                            disableSorting: null
                          },
                          {
                            key: "type",
                            fieldId: "type",
                            disableSorting: null,
                            title: null
                          },
                          {
                            key: "email_id",
                            fieldId: "email_id",
                            isHidden: null
                          },
                          {
                            key: "partner_id",
                            fieldId: "partner_id",
                            isHidden: null
                          },
                          {
                            key: "PartnerLocationId",
                            fieldId: "PartnerLocationId",
                            isHidden: null
                          },
                          {
                            key: "created_at",
                            fieldId: "created_at",
                            isHidden: null
                          },
                          {
                            key: "newsletter_id",
                            fieldId: "newsletter_id",
                            isHidden: null
                          },
                          { title: null, disableSorting: null, expr: null }
                        ];
                        __composite["0"]["isHidden"] = true;
                        __composite["1"]["isHidden"] = true;
                        __composite["2"]["dataType"] = "relative-datetime";
                        __composite["2"]["title"] = " ";
                        __composite["2"]["disableSorting"] = true;
                        __composite["3"]["disableSorting"] = true;
                        __composite["3"]["title"] = "Event";
                        __composite["4"]["isHidden"] = true;
                        __composite["5"]["isHidden"] = true;
                        __composite["6"]["isHidden"] = true;
                        __composite["7"]["isHidden"] = true;
                        __composite["8"]["isHidden"] = true;
                        __composite["9"]["title"] = "Email";
                        __composite["9"]["disableSorting"] = true;
                        __composite["9"]["expr"] = (
                          currentItem,
                          currentValue
                        ) => {
                          return (() => {
                            return (
                              $queries.getEmail.data.response.find(
                                entry => entry.id == currentItem.email_id
                              )?.subject ?? null
                            );
                          })();
                        };
                        return __composite;
                      })(),

                      hideColumnPicker: true,
                      hideExports: true,
                      hideSearch: true,
                      onRowSelectionChanged: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table3", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table3", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table3", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table3", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      pageSize: 8,
                      pagination: (() => {
                        try {
                          return (() => {
                            const sortedLogs =
                              ($queries.getLogs?.data || [])
                                .filter(
                                  entry =>
                                    entry.sub_id == $state.table.selectedRowKey
                                )
                                .sort((a, b) => {
                                  const timestampA = new Date(
                                    a.timestamp
                                  ).getTime();
                                  const timestampB = new Date(
                                    b.timestamp
                                  ).getTime();
                                  return timestampB - timestampA;
                                }).length >= 8;
                            return sortedLogs;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      scopeClassName: sty["table3__instance"],
                      selectedRowKey: generateStateValueProp($state, [
                        "table3",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: generateStateValueProp($state, [
                        "table3",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table3.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table3.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table3.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table3.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table3"}
                        data-plasmic-override={overrides.table3}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              ) : null}
            </div>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "select",
    "columns",
    "section",
    "table",
    "radioGroup",
    "table2",
    "chart",
    "table3"
  ],
  select: ["select"],
  columns: [
    "columns",
    "section",
    "table",
    "radioGroup",
    "table2",
    "chart",
    "table3"
  ],
  section: ["section", "table"],
  table: ["table"],
  radioGroup: ["radioGroup"],
  table2: ["table2"],
  chart: ["chart"],
  table3: ["table3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  select: typeof AntdSelect;
  columns: "div";
  section: "section";
  table: typeof RichTable;
  radioGroup: typeof AntdRadioGroup;
  table2: typeof RichTable;
  chart: typeof SimpleChart;
  table3: typeof RichTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubscribers__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubscribers__VariantsArgs;
    args?: PlasmicSubscribers__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubscribers__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSubscribers__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSubscribers__ArgProps,
          internalVariantPropNames: PlasmicSubscribers__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubscribers__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubscribers";
  } else {
    func.displayName = `PlasmicSubscribers.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "hUezQ7Kcu4Vi3zRYfXUddy"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicSubscribers = Object.assign(
  // Top-level PlasmicSubscribers renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent("select"),
    columns: makeNodeComponent("columns"),
    section: makeNodeComponent("section"),
    table: makeNodeComponent("table"),
    radioGroup: makeNodeComponent("radioGroup"),
    table2: makeNodeComponent("table2"),
    chart: makeNodeComponent("chart"),
    table3: makeNodeComponent("table3"),

    // Metadata about props expected for PlasmicSubscribers
    internalVariantProps: PlasmicSubscribers__VariantProps,
    internalArgProps: PlasmicSubscribers__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSubscribers;
/* prettier-ignore-end */
