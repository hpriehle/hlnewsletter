// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hUezQ7Kcu4Vi3zRYfXUddy
// Component: AZ0VSRQx8DP7

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { Quill } from "@plasmicpkgs/react-quill";
import { quillHelpers as Quill_Helpers } from "@plasmicpkgs/react-quill";
import { RichCalendar } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import { calendarHelpers as RichCalendar_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import { SimpleChart } from "@plasmicpkgs/react-chartjs-2";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import Statistic from "../../Statistic"; // plasmic-import: 4Jw9lnOUo3vH/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import CalendarNew from "../../CalendarNew"; // plasmic-import: _oVCI9EThS9J/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: hUezQ7Kcu4Vi3zRYfXUddy/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: AZ0VSRQx8DP7/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: EREPOSAXgrkR/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  select?: Flex__<typeof AntdSelect>;
  columns?: Flex__<"div">;
  input?: Flex__<typeof AntdInput>;
  timePicker?: Flex__<typeof AntdDatePicker>;
  richTextEditor?: Flex__<typeof Quill>;
  calendar?: Flex__<typeof RichCalendar>;
  table?: Flex__<typeof RichTable>;
  input2?: Flex__<typeof AntdInput>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  calendarNew?: Flex__<typeof CalendarNew>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "calendar.mode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("mode", RichCalendar_Helpers)
      },
      {
        path: "calendar.selectedDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                {
                  return (() => {
                    const today = new Date();
                    const year = today.getFullYear();
                    const month = String(today.getMonth() + 1).padStart(2, "0");
                    const day = String(today.getDate()).padStart(2, "0");
                    return `${year}-${month}-${day}`;
                  })();
                }
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("selectedDate", RichCalendar_Helpers)
      },
      {
        path: "radioGroup.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "scheduled"
      },
      {
        path: "currentEmail",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getEmails.data.find(
                entry => entry.id == $state.currentEmail
              ).subject;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "richTextEditor.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getEmails.data.find(
                entry => entry.id == $state.currentEmail
              ).html_content;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", Quill_Helpers)
      },
      {
        path: "timePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getEmails.data.find(
                entry => entry.id == $state.currentEmail
              ).schedule_time;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "emailIdeas",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "emails",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                function addCurrentFlag(dataArray) {
                  return dataArray.map(item => ({
                    ...item,
                    current: false
                  }));
                }
                const updatedArray = addCurrentFlag($queries.getEmails.data);
                return updatedArray;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "ideasLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.getNewsletter.data[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getEmails: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "6c337879-7adf-46b1-a81f-5f5428e81936",
        userArgs: {
          filters: [$queries.getParner.data[0].id, $state.select.value]
        },
        cacheKey: `plasmic.$.6c337879-7adf-46b1-a81f-5f5428e81936.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getParner: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "29fd476d-2acb-4415-8daf-b055daa954af",
        userArgs: {
          filters: [$ctx.query.locationid]
        },
        cacheKey: `plasmic.$.29fd476d-2acb-4415-8daf-b055daa954af.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getNewsletter: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "beb89871-b205-4d76-bd81-b581a2956592",
        userArgs: {
          filters: [$queries.getParner.data[0].id]
        },
        cacheKey: `plasmic.$.beb89871-b205-4d76-bd81-b581a2956592.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getLogs: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "b9923863-18db-479d-8135-c73656809bc4",
        userArgs: {
          filters: [$queries.getParner.data[0].id, $state.select.value]
        },
        cacheKey: `plasmic.$.b9923863-18db-479d-8135-c73656809bc4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getSubs: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "5269468f-04c7-45de-b10f-5fbef07b7310",
        userArgs: {
          filters: [$state.select.value]
        },
        cacheKey: `plasmic.$.5269468f-04c7-45de-b10f-5fbef07b7310.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getContacts: usePlasmicDataOp(() => {
      return {
        sourceId: "ha2fsp5qYJUuqWXEXDhA28",
        opId: "2ff64b1c-a7de-44c8-a471-df1479cb20e2",
        userArgs: {
          query: [
            (() => {
              return ($queries.getLogs?.data || [])
                .filter(
                  entry =>
                    entry.type === "sent" &&
                    entry.email_id === $state.currentEmail
                )
                .map(entry => entry.sub_id)
                .map(sub_id => {
                  const subEntry = ($queries.getSubs?.data || []).find(
                    entry => entry.id == sub_id
                  );
                  return subEntry ? subEntry.contact_id : null;
                })
                .filter(contact_id => contact_id !== null)
                .join(", ");
            })()
          ]
        },
        cacheKey: `plasmic.$.2ff64b1c-a7de-44c8-a471-df1479cb20e2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hd1NQ)}>
            <div className={classNames(projectcss.all, sty.freeBox__aevWe)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k4Mq5
                )}
              >
                {"Newsletter"}
              </div>
              <AntdButton
                className={classNames("__wab_instance", sty.button__wla2U)}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rzaxM
                  )}
                >
                  {"Composer"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button___7Iws1)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gbyOk
                  )}
                >
                  {"Newsletters"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button__sw55T)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__caWMo
                  )}
                >
                  {"Subscribers"}
                </div>
              </AntdButton>
              <AntdButton
                className={classNames("__wab_instance", sty.button___5KvKb)}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vmUp
                  )}
                >
                  {"Settings"}
                </div>
              </AntdButton>
              <div className={classNames(projectcss.all, sty.freeBox__y8D0)}>
                <div className={classNames(projectcss.all, sty.freeBox__eRhhn)}>
                  {(() => {
                    try {
                      return $queries.getNewsletter.data.length == 1
                        ? false
                        : true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <AntdSelect
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      defaultValue={(() => {
                        try {
                          return $queries.getNewsletter.data[0].id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onChange={generateStateOnChangeProp($state, [
                        "select",
                        "value"
                      ])}
                      options={(() => {
                        try {
                          return (() => {
                            const result = $queries.getNewsletter.data.map(
                              entry => ({
                                label: entry.title,
                                value: entry.id
                              })
                            );
                            return result;
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [
                              {
                                value: "option1",
                                label: "Option 1",
                                type: "option"
                              },
                              {
                                value: "option2",
                                label: "Option 2",
                                type: "option"
                              }
                            ];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={"Select Newsletter"}
                      popupScopeClassName={sty["select__popup"]}
                      value={generateStateValueProp($state, [
                        "select",
                        "value"
                      ])}
                    />
                  ) : null}
                </div>
                <AntdButton
                  className={classNames("__wab_instance", sty.button___2WlIa)}
                  type={"primary"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0RzMr
                    )}
                  >
                    {"New Email"}
                  </div>
                </AntdButton>
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__uQyu)}
            >
              {(() => {
                try {
                  return (
                    ($state.radioGroup.value === "scheduled" ||
                      $state.radioGroup.value === "draft") &&
                    $state.currentEmail !== ""
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__lxhOj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nJt3D)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___36Ef
                      )}
                    >
                      {"Edit"}
                    </div>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__l8Fkb
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["updateCurrentEmail"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["currentEmail"]
                                },
                                operation: 0,
                                value: ""
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCurrentEmail"] != null &&
                          typeof $steps["updateCurrentEmail"] === "object" &&
                          typeof $steps["updateCurrentEmail"].then ===
                            "function"
                        ) {
                          $steps["updateCurrentEmail"] = await $steps[
                            "updateCurrentEmail"
                          ];
                        }
                      }}
                      type={"default"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7McEh
                        )}
                      >
                        {"Close "}
                      </div>
                    </AntdButton>
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button___36Qwd
                      )}
                      onClick={async () => {
                        const $steps = {};

                        $steps["postgresUpdateMany"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "ha2fsp5qYJUuqWXEXDhA28",
                                  opId: "1ccb201b-f7dc-4de4-b4c3-e77d9efaef91",
                                  userArgs: {
                                    conditions: [$state.currentEmail],
                                    variables: [
                                      $state.input.value,
                                      $state.timePicker.value,
                                      $state.richTextEditor.value
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: [],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateMany"] != null &&
                          typeof $steps["postgresUpdateMany"] === "object" &&
                          typeof $steps["postgresUpdateMany"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateMany"] = await $steps[
                            "postgresUpdateMany"
                          ];
                        }

                        $steps["removeEmail"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["emails"]
                                },
                                operation: 6,
                                value: (() => {
                                  const emailId = $queries.getEmails.data.find(
                                    entry => entry.id == $state.currentEmail
                                  ).id;
                                  const emailIndex = $state.emails.findIndex(
                                    entry => entry.id == emailId
                                  );
                                  return emailIndex;
                                })(),
                                startIndex: (() => {
                                  try {
                                    return (() => {
                                      const emailId =
                                        $queries.getEmails.data.find(
                                          entry =>
                                            entry.id == $state.currentEmail
                                        ).id;
                                      const emailIndex =
                                        $state.emails.findIndex(
                                          entry => entry.id == emailId
                                        );
                                      return emailIndex;
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })(),
                                deleteCount: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const arr = $stateGet(objRoot, variablePath);
                                arr.splice(startIndex, deleteCount);
                                return arr;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["removeEmail"] != null &&
                          typeof $steps["removeEmail"] === "object" &&
                          typeof $steps["removeEmail"].then === "function"
                        ) {
                          $steps["removeEmail"] = await $steps["removeEmail"];
                        }

                        $steps["addEmail"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["emails"]
                                },
                                operation: 5,
                                value: (() => {
                                  function getCurrentDateTime() {
                                    const currentDate = new Date();
                                    return currentDate.toISOString();
                                  }
                                  function createEmailData() {
                                    return {
                                      subject: $state.input.value,
                                      html_content: $state.richTextEditor.value,
                                      status:
                                        $state.timePicker.value == null
                                          ? "draft"
                                          : "scheduled",
                                      created_at: getCurrentDateTime(),
                                      schedule_time: $state.timePicker.value,
                                      id: $queries.getEmails.data.find(
                                        entry => entry.id == $state.currentEmail
                                      ).id,
                                      partner_id: $queries.getParner.data[0].id,
                                      widget_form: "false",
                                      widget_poll: "true",
                                      widget_referral: "false",
                                      widget_feedback: "false",
                                      tag_id: null,
                                      template_id: null,
                                      newsletter_id: $state.select.value,
                                      current: false
                                    };
                                  }
                                  return createEmailData();
                                })()
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const arr = $stateGet(objRoot, variablePath);
                                arr.push(value);
                                return arr;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["addEmail"] != null &&
                          typeof $steps["addEmail"] === "object" &&
                          typeof $steps["addEmail"].then === "function"
                        ) {
                          $steps["addEmail"] = await $steps["addEmail"];
                        }

                        $steps["updateCurrentEmail"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["currentEmail"]
                                },
                                operation: 0,
                                value: ""
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCurrentEmail"] != null &&
                          typeof $steps["updateCurrentEmail"] === "object" &&
                          typeof $steps["updateCurrentEmail"].then ===
                            "function"
                        ) {
                          $steps["updateCurrentEmail"] = await $steps[
                            "updateCurrentEmail"
                          ];
                        }
                      }}
                      type={"primary"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vVm91
                        )}
                      >
                        {"Save Changes"}
                      </div>
                    </AntdButton>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__f9Dv3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0UWny
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__huLUx
                        )}
                      >
                        {"Subject"}
                      </div>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ),
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dRnQs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lx2Aw
                        )}
                      >
                        {"Scheduled Date + Time"}
                      </div>
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          autoFocus: true,
                          className: classNames(
                            "__wab_instance",
                            sty.timePicker
                          ),
                          defaultValue: (() => {
                            try {
                              return $queries.getEmails.data.find(
                                entry => entry.id == $state.currentEmail
                              ).schedule_time;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["timePicker", "value"],
                              AntdDatePicker_Helpers
                            ).apply(null, eventArgs);
                            (async value => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = (() => {
                                function isDateBeforeToday(dateString) {
                                  const inputDate = new Date(dateString);
                                  const today = new Date();
                                  today.setHours(0, 0, 0, 0);
                                  return inputDate < today;
                                }
                                return isDateBeforeToday(
                                  $state.timePicker.value
                                );
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "info",
                                        "Oops!",
                                        "Cannot set date in the past",
                                        5
                                      ]
                                    };
                                    return $globalActions[
                                      "plasmic-antd5-config-provider.showNotification"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }

                              $steps["updateTimePickerValue"] = (() => {
                                function isDateBeforeToday(dateString) {
                                  const inputDate = new Date(dateString);
                                  const today = new Date();
                                  today.setHours(0, 0, 0, 0);
                                  return inputDate < today;
                                }
                                return isDateBeforeToday(
                                  $state.timePicker.value
                                );
                              })()
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["timePicker", "value"]
                                      },
                                      operation: 1
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        undefined
                                      );
                                      return undefined;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateTimePickerValue"] != null &&
                                typeof $steps["updateTimePickerValue"] ===
                                  "object" &&
                                typeof $steps["updateTimePickerValue"].then ===
                                  "function"
                              ) {
                                $steps["updateTimePickerValue"] = await $steps[
                                  "updateTimePickerValue"
                                ];
                              }
                            }).apply(null, eventArgs);
                          },
                          picker: "date",
                          popupScopeClassName:
                            sty["timePicker__datePickerPopup"],
                          showTime: true,
                          value: generateStateValueProp($state, [
                            "timePicker",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "timePicker.value"
                            }
                          ],
                          [],
                          AntdDatePicker_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdDatePicker
                            data-plasmic-name={"timePicker"}
                            data-plasmic-override={overrides.timePicker}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </div>
                  {(() => {
                    const child$Props = {
                      containerClassName: classNames(
                        "__wab_instance",
                        sty.richTextEditor
                      ),
                      defaultValue: (() => {
                        try {
                          return $queries.getEmails.data.find(
                            entry => entry.id == $state.currentEmail
                          ).html_content;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      onChange: generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["richTextEditor", "value"],
                        Quill_Helpers
                      ),
                      preserveWhitespace: true,
                      readOnly: false,
                      toolbar: (() => {
                        const __composite = {
                          textStyle: [
                            "bold",
                            "italic",
                            "underline",
                            "strikethrough"
                          ],
                          colors: ["text color", "text background"],
                          script: null,
                          fontFamily: true,
                          heading: [
                            "Heading 1",
                            "Heading 2",
                            "Heading 3",
                            "Heading 4",
                            "Heading 5",
                            "Heading 6",
                            "Body"
                          ],
                          fontSizes: ["small", "medium", "large", "huge"],
                          formatting: [
                            "alignment",
                            "list",
                            "indentation",
                            "text direction",
                            "clear formatting"
                          ],
                          inputTypes: null
                        };
                        __composite["script"] = false;
                        __composite["inputTypes"] = [
                          "link",
                          "blockquote",
                          "image",
                          "video",
                          "code-block"
                        ];
                        return __composite;
                      })(),

                      value: generateStateValueProp($state, [
                        "richTextEditor",
                        "value"
                      ])
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "richTextEditor.value"
                        }
                      ],
                      [],
                      Quill_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <Quill
                        data-plasmic-name={"richTextEditor"}
                        data-plasmic-override={overrides.richTextEditor}
                        {...child$Props}
                      />
                    );
                  })()}
                </div>
              ) : null}
              {(() => {
                try {
                  return $state.radioGroup.value == "scheduled";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <section
                  className={classNames(projectcss.all, sty.section__iwdxk)}
                >
                  {(() => {
                    try {
                      return $state.currentEmail == "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zqXg0)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1___4F5R0
                        )}
                      >
                        {"Content Calendar"}
                      </h1>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.calendar),
                          color: (() => {
                            const __composite = { fieldId: null, expr: null };
                            __composite["fieldId"] = "status";
                            __composite["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return currentItem.status == "scheduled"
                                ? "#0092FF"
                                : "#9B9B9A";
                            };
                            return __composite;
                          })(),

                          data: (() => {
                            try {
                              return $queries.getEmails.data.filter(
                                entry => entry.status == "scheduled" || "sent"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          date: (() => {
                            const __composite = {
                              key: "created_at",
                              fieldId: null,
                              role: "date"
                            };
                            __composite["fieldId"] = "schedule_time";
                            return __composite;
                          })(),

                          defaultValue: (() => {
                            try {
                              return (() => {
                                {
                                  return (() => {
                                    const today = new Date();
                                    const year = today.getFullYear();
                                    const month = String(
                                      today.getMonth() + 1
                                    ).padStart(2, "0");
                                    const day = String(
                                      today.getDate()
                                    ).padStart(2, "0");
                                    return `${year}-${month}-${day}`;
                                  })();
                                }
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          mode: generateStateValueProp($state, [
                            "calendar",
                            "mode"
                          ]),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "selectedDate",
                            ["calendar", "selectedDate"],
                            RichCalendar_Helpers
                          ),
                          onPanelChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "mode",
                              ["calendar", "mode"],
                              RichCalendar_Helpers
                            ),
                          title: (() => {
                            const __composite = [
                              {
                                role: "title",
                                fieldId: null,
                                isHidden: null,
                                expr: null,
                                dataType: null
                              }
                            ];
                            __composite["0"]["fieldId"] = "subject";
                            __composite["0"]["isHidden"] = false;
                            __composite["0"]["expr"] = (
                              currentItem,
                              currentValue
                            ) => {
                              return currentItem.subject.slice(0, 30) + "...";
                            };
                            __composite["0"]["dataType"] = "string";
                            return __composite;
                          })(),

                          value: generateStateValueProp($state, [
                            "calendar",
                            "selectedDate"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "mode",
                              plasmicStateName: "calendar.mode"
                            },
                            {
                              name: "selectedDate",
                              plasmicStateName: "calendar.selectedDate"
                            }
                          ],
                          [],
                          RichCalendar_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <RichCalendar
                            data-plasmic-name={"calendar"}
                            data-plasmic-override={overrides.calendar}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  ) : null}
                </section>
              ) : null}
              {(() => {
                try {
                  return $state.radioGroup.value == "sent";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <section
                  className={classNames(projectcss.all, sty.section__sPkOa)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__asVnq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nnQzs)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1___7Ytv
                        )}
                      >
                        {"Analytics"}
                      </h1>
                      {(() => {
                        try {
                          return $state.currentEmail != "";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__mPt44
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateCurrentEmail"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["currentEmail"]
                                    },
                                    operation: 0,
                                    value: ""
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateCurrentEmail"] != null &&
                              typeof $steps["updateCurrentEmail"] ===
                                "object" &&
                              typeof $steps["updateCurrentEmail"].then ===
                                "function"
                            ) {
                              $steps["updateCurrentEmail"] = await $steps[
                                "updateCurrentEmail"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i1ADq
                            )}
                          >
                            {"Close"}
                          </div>
                        </AntdButton>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e1PuM)}
                    >
                      <SimpleChart
                        className={classNames(
                          "__wab_instance",
                          sty.chart__xZZtd
                        )}
                        data={(() => {
                          const logsData =
                            $state.currentEmail !== ""
                              ? $queries.getLogs.data.filter(
                                  entry =>
                                    entry.email_id === $state.currentEmail
                                )
                              : $queries.getLogs.data;
                          const filteredLogsData = logsData;
                          const transformedArray = filteredLogsData
                            .map(entry => {
                              const date = new Date(entry.timestamp)
                                .toISOString()
                                .split("T")[0];
                              return {
                                Date: date,
                                Type: entry.type
                              };
                            })
                            .reduce((acc, entry) => {
                              if (!acc[entry.Date]) {
                                acc[entry.Date] = {
                                  opened: 0,
                                  clicked: 0
                                };
                              }
                              if (entry.Type === "opened") {
                                acc[entry.Date].opened++;
                              } else if (entry.Type === "clicked") {
                                acc[entry.Date].clicked++;
                              }
                              return acc;
                            }, {});
                          const splitOpensClicksPerDay = Object.keys(
                            transformedArray
                          )
                            .map(date => {
                              return {
                                Date: date,
                                Opens: transformedArray[date].opened,
                                Clicks: transformedArray[date].clicked
                              };
                            })
                            .sort(
                              (a, b) => new Date(a.Date) - new Date(b.Date)
                            );
                          return splitOpensClicksPerDay;
                        })()}
                        type={"line"}
                      />

                      <Embed
                        className={classNames(
                          "__wab_instance",
                          sty.embedHtml__cL55C
                        )}
                        code={(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "<div>Paste your embed code via the right sidebar</div>";
                            }
                            throw e;
                          }
                        })()}
                      />
                    </div>
                    {(() => {
                      try {
                        return $state.currentEmail == "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vxqr9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vVrt0
                          )}
                        >
                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__ik8Jo
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nTiGa
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $queries.getSubs.data.length;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "3,193";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sp43
                                )}
                              >
                                {"Total Subscriptions"}
                              </div>
                            }
                          />

                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__gTIk
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__z5BAj
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function getRecentItemsCount($queries) {
                                          const sevenDaysAgo = new Date();
                                          sevenDaysAgo.setDate(
                                            sevenDaysAgo.getDate() - 7
                                          );
                                          return $queries.getLogs.data.filter(
                                            item =>
                                              new Date(item.timestamp) >=
                                              sevenDaysAgo
                                          ).length;
                                        }
                                        return getRecentItemsCount($queries);
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "3,193";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__b10U1
                                )}
                              >
                                {"New Subs \nthis Week"}
                              </div>
                            }
                          />

                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__a6VXr
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3Itvb
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function calculateOpenRate(queries) {
                                          const allLogs = queries.getLogs.data;
                                          const totalOpens = allLogs.filter(
                                            entry => entry.type === "opened"
                                          ).length;
                                          const totalSent = allLogs.filter(
                                            entry => entry.type === "sent"
                                          ).length;
                                          if (totalSent === 0) {
                                            return "0.00";
                                          }
                                          const openRate =
                                            (totalOpens / totalSent) * 100;
                                          return openRate.toFixed(2);
                                        }
                                        return (function () {
                                          try {
                                            const openRate =
                                              calculateOpenRate($queries);
                                            return openRate + "%";
                                          } catch (error) {
                                            return "Error calculating open rate.";
                                          }
                                        })();
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "3,193";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__jLy6
                                )}
                              >
                                {"Open\nRate"}
                              </div>
                            }
                          />

                          <Statistic
                            className={classNames(
                              "__wab_instance",
                              sty.statistic__gPiT
                            )}
                            number={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__haMqN
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (() => {
                                        function calculateOpenRate(queries) {
                                          const allLogs = queries.getLogs.data;
                                          const totalOpens = allLogs.filter(
                                            entry => entry.type === "clicked"
                                          ).length;
                                          const totalSent = allLogs.filter(
                                            entry => entry.type === "sent"
                                          ).length;
                                          if (totalSent === 0) {
                                            return "0.00";
                                          }
                                          const openRate =
                                            (totalOpens / totalSent) * 100;
                                          return openRate.toFixed(2);
                                        }
                                        return (function () {
                                          try {
                                            const openRate =
                                              calculateOpenRate($queries);
                                            return openRate + "%";
                                          } catch (error) {
                                            return "Error calculating open rate.";
                                          }
                                        })();
                                      })();
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "3,193";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            unit={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qomcp
                                )}
                              >
                                {"Clicked\nRate"}
                              </div>
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zFd7Z
                          )}
                        >
                          <SimpleChart
                            className={classNames(
                              "__wab_instance",
                              sty.chart__pyeBv
                            )}
                            data={(() => {
                              const logsData =
                                $state.currentEmail !== ""
                                  ? $queries.getLogs.data.filter(
                                      entry =>
                                        entry.email_id === $state.currentEmail
                                    )
                                  : $queries.getLogs.data;
                              const filteredLogsData = logsData;
                              const sevenDaysAgo = new Date();
                              sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                              const transformedArray = filteredLogsData
                                .filter(
                                  entry =>
                                    new Date(entry.timestamp) >= sevenDaysAgo
                                )
                                .map(entry => {
                                  const date = new Date(entry.timestamp)
                                    .toISOString()
                                    .split("T")[0];
                                  return {
                                    Date: date,
                                    Type: entry.type
                                  };
                                })
                                .reduce((acc, entry) => {
                                  if (!acc[entry.Date]) {
                                    acc[entry.Date] = {
                                      subscribed: 0,
                                      unsubscribed: 0
                                    };
                                  }
                                  if (entry.Type === "subscribed") {
                                    acc[entry.Date].subscribed++;
                                  } else if (entry.Type === "unsubscribed") {
                                    acc[entry.Date].unsubscribed--;
                                  }
                                  return acc;
                                }, {});
                              const splitSubscriptionsPerDay = Object.keys(
                                transformedArray
                              )
                                .map(date => {
                                  return {
                                    Date: date,
                                    Subscribed:
                                      transformedArray[date].subscribed,
                                    Unsubscribed:
                                      transformedArray[date].unsubscribed
                                  };
                                })
                                .sort(
                                  (a, b) => new Date(b.Date) - new Date(a.Date)
                                )
                                .slice(0, 7);
                              return splitSubscriptionsPerDay;
                            })()}
                            type={"line"}
                          />

                          <Embed
                            className={classNames(
                              "__wab_instance",
                              sty.embedHtml__jKqaa
                            )}
                            code={(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "<div>Paste your embed code via the right sidebar</div>";
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      </div>
                    ) : null}
                  </div>
                  {(() => {
                    try {
                      return $state.currentEmail != "";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___6S2P)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Rqed
                        )}
                      >
                        <Statistic
                          className={classNames(
                            "__wab_instance",
                            sty.statistic__yrWdl
                          )}
                          number={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tXiAm
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      $queries.getLogs?.data || []
                                    ).filter(
                                      entry =>
                                        entry.type === "sent" &&
                                        entry.email_id === $state.currentEmail
                                    ).length;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "3,193";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          unit={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wIlMw
                              )}
                            >
                              {"Emails\nSent"}
                            </div>
                          }
                        />

                        <Statistic
                          className={classNames(
                            "__wab_instance",
                            sty.statistic__d61Od
                          )}
                          number={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xtFow
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      function calculateOpens(queries) {
                                        const filteredLogs =
                                          $state.currentEmail !== ""
                                            ? queries.getLogs.data.filter(
                                                entry =>
                                                  entry.email_id ===
                                                  $state.currentEmail
                                              )
                                            : queries.getLogs.data;
                                        const totalOpens = filteredLogs.filter(
                                          entry => entry.type == "opened"
                                        ).length;
                                        return totalOpens;
                                      }
                                      return (function () {
                                        const totalOpens =
                                          calculateOpens($queries);
                                        return totalOpens;
                                      })();
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "3,193";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          unit={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hThle
                              )}
                            >
                              {"Total \nOpens"}
                            </div>
                          }
                        />

                        <Statistic
                          className={classNames(
                            "__wab_instance",
                            sty.statistic__yMvUo
                          )}
                          number={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eczJt
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      function calculateOpenRate(queries) {
                                        const filteredLogs =
                                          $state.currentEmail !== ""
                                            ? queries.getLogs.data.filter(
                                                entry =>
                                                  entry.email_id ===
                                                  $state.currentEmail
                                              )
                                            : queries.getLogs.data;
                                        const totalOpens = filteredLogs.filter(
                                          entry => entry.type == "opened"
                                        ).length;
                                        const totalSent = filteredLogs.filter(
                                          entry => entry.type == "sent"
                                        ).length;
                                        if (totalSent === 0) {
                                          return "0.00";
                                        }
                                        const openRate =
                                          (totalOpens / totalSent) * 100;
                                        return openRate.toFixed(2);
                                      }
                                      return (function () {
                                        const openRate =
                                          calculateOpenRate($queries);
                                        console.log(
                                          "Open Rate:",
                                          openRate + "%"
                                        );
                                        return openRate + "%";
                                      })();
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "3,193";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          unit={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jUh8N
                              )}
                            >
                              {"Open\nRate"}
                            </div>
                          }
                        />

                        <Statistic
                          className={classNames(
                            "__wab_instance",
                            sty.statistic__fp0Py
                          )}
                          number={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uBI4
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      function calculateOpens(queries) {
                                        const filteredLogs =
                                          $state.currentEmail !== ""
                                            ? queries.getLogs.data.filter(
                                                entry =>
                                                  entry.email_id ===
                                                  $state.currentEmail
                                              )
                                            : queries.getLogs.data;
                                        const totalOpens = filteredLogs.filter(
                                          entry => entry.type == "clicked"
                                        ).length;
                                        return totalOpens;
                                      }
                                      return (function () {
                                        const totalOpens =
                                          calculateOpens($queries);
                                        return totalOpens;
                                      })();
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "3,193";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          unit={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wfKK
                              )}
                            >
                              {"Total \nClicks"}
                            </div>
                          }
                        />

                        <Statistic
                          className={classNames(
                            "__wab_instance",
                            sty.statistic__ocrAz
                          )}
                          number={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__di6W
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      function calculateOpenRate(queries) {
                                        const filteredLogs =
                                          $state.currentEmail !== ""
                                            ? queries.getLogs.data.filter(
                                                entry =>
                                                  entry.email_id ===
                                                  $state.currentEmail
                                              )
                                            : queries.getLogs.data;
                                        const totalOpens = filteredLogs.filter(
                                          entry => entry.type == "clicked"
                                        ).length;
                                        const totalSent = filteredLogs.filter(
                                          entry => entry.type == "sent"
                                        ).length;
                                        if (totalSent === 0) {
                                          return "0.00";
                                        }
                                        const openRate =
                                          (totalOpens / totalSent) * 100;
                                        return openRate.toFixed(2);
                                      }
                                      return (function () {
                                        const openRate =
                                          calculateOpenRate($queries);
                                        console.log(
                                          "Open Rate:",
                                          openRate + "%"
                                        );
                                        return openRate + "%";
                                      })();
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "3,193";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          }
                          unit={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__p7Qat
                              )}
                            >
                              {"Clicked\nRate"}
                            </div>
                          }
                        />
                      </div>
                      {(() => {
                        try {
                          return !$queries.getContacts.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                        ? (() => {
                            const child$Props = {
                              className: classNames(
                                "__wab_instance",
                                sty.table
                              ),
                              data: (() => {
                                try {
                                  return ($queries.getLogs?.data || []).filter(
                                    entry =>
                                      entry.type === "sent" &&
                                      entry.email_id === $state.currentEmail
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              fields: (() => {
                                const __composite = [
                                  { key: "id", fieldId: "id", isHidden: null },
                                  {
                                    key: "sub_id",
                                    fieldId: "sub_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "email_id",
                                    fieldId: "email_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "type",
                                    fieldId: "type",
                                    isHidden: null
                                  },
                                  {
                                    key: "partner_id",
                                    fieldId: "partner_id",
                                    isHidden: null
                                  },
                                  {
                                    key: "PartnerLocationId",
                                    fieldId: "PartnerLocationId",
                                    isHidden: null
                                  },
                                  {
                                    key: "timestamp",
                                    fieldId: "timestamp",
                                    dataType: null,
                                    dateStyle: null,
                                    timeStyle: null,
                                    title: null,
                                    disableSorting: null
                                  },
                                  {
                                    key: "created_at",
                                    fieldId: "created_at",
                                    isHidden: null
                                  },
                                  {
                                    title: null,
                                    expr: null,
                                    disableSorting: null
                                  },
                                  {
                                    title: null,
                                    expr: null,
                                    disableSorting: null
                                  },
                                  {
                                    title: null,
                                    expr: null,
                                    disableSorting: null
                                  },
                                  {
                                    title: null,
                                    expr: null,
                                    disableSorting: null
                                  },
                                  {
                                    key: "newsletter_id",
                                    fieldId: "newsletter_id",
                                    isHidden: null
                                  }
                                ];
                                __composite["0"]["isHidden"] = true;
                                __composite["1"]["isHidden"] = true;
                                __composite["2"]["isHidden"] = true;
                                __composite["3"]["isHidden"] = true;
                                __composite["4"]["isHidden"] = true;
                                __composite["5"]["isHidden"] = true;
                                __composite["6"]["dataType"] = "datetime";
                                __composite["6"]["dateStyle"] = "short";
                                __composite["6"]["timeStyle"] = "short";
                                __composite["6"]["title"] = "Date";
                                __composite["6"]["disableSorting"] = true;
                                __composite["7"]["isHidden"] = true;
                                __composite["8"]["title"] = "Subscriber";
                                __composite["8"]["expr"] = (
                                  currentItem,
                                  currentValue
                                ) => {
                                  return (() => {
                                    const contId = $queries.getSubs.data.find(
                                      entry => entry.id == currentItem.sub_id
                                    ).contact_id;
                                    return $queries.getContacts.data.find(
                                      entry => entry.id == contId
                                    ).name;
                                  })();
                                };
                                __composite["8"]["disableSorting"] = true;
                                __composite["9"]["title"] = "Email";
                                __composite["9"]["expr"] = (
                                  currentItem,
                                  currentValue
                                ) => {
                                  return (() => {
                                    const contId = $queries.getSubs.data.find(
                                      entry => entry.id == currentItem.sub_id
                                    ).contact_id;
                                    return $queries.getContacts.data.find(
                                      entry => entry.id == contId
                                    ).email;
                                  })();
                                };
                                __composite["9"]["disableSorting"] = true;
                                __composite["10"]["title"] = "Clicks";
                                __composite["10"]["expr"] = (
                                  currentItem,
                                  currentValue
                                ) => {
                                  return (() => {
                                    return $queries.getLogs.data.filter(
                                      entry =>
                                        entry.sub_id === currentItem.id &&
                                        entry.type === "clicked"
                                    ).length;
                                  })();
                                };
                                __composite["10"]["disableSorting"] = true;
                                __composite["11"]["title"] = "Opens";
                                __composite["11"]["expr"] = (
                                  currentItem,
                                  currentValue
                                ) => {
                                  return (() => {
                                    return $queries.getLogs.data.filter(
                                      entry =>
                                        entry.sub_id === currentItem.id &&
                                        entry.type === "opened"
                                    ).length;
                                  })();
                                };
                                __composite["11"]["disableSorting"] = true;
                                __composite["12"]["isHidden"] = true;
                                return __composite;
                              })(),

                              hideColumnPicker: true,
                              hideExports: true,
                              hideSearch: true,
                              onRowSelectionChanged: async (
                                ...eventArgs: any
                              ) => {
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKey",
                                  ["table", "selectedRowKey"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRow",
                                  ["table", "selectedRow"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRows",
                                  ["table", "selectedRows"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "selectedRowKeys",
                                  ["table", "selectedRowKeys"],
                                  RichTable_Helpers
                                ).apply(null, eventArgs);
                              },
                              pageSize: 10,
                              pagination: (() => {
                                try {
                                  return (
                                    ($queries.getLogs?.data || []).filter(
                                      entry =>
                                        entry.type === "sent" &&
                                        entry.email_id === $state.currentEmail
                                    ).length > 10
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })(),
                              scopeClassName: sty["table__instance"],
                              selectedRowKey: generateStateValueProp($state, [
                                "table",
                                "selectedRowKey"
                              ]),
                              selectedRowKeys: generateStateValueProp($state, [
                                "table",
                                "selectedRowKeys"
                              ]),
                              themeResetClassName: classNames(
                                projectcss.root_reset,
                                projectcss.root_reset_tags,
                                projectcss.plasmic_default_styles,
                                projectcss.plasmic_mixins,
                                projectcss.plasmic_tokens,
                                plasmic_antd_5_hostless_css.plasmic_tokens,
                                plasmic_plasmic_rich_components_css.plasmic_tokens
                              )
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "selectedRowKey",
                                  plasmicStateName: "table.selectedRowKey"
                                },
                                {
                                  name: "selectedRow",
                                  plasmicStateName: "table.selectedRow"
                                },
                                {
                                  name: "selectedRows",
                                  plasmicStateName: "table.selectedRows"
                                },
                                {
                                  name: "selectedRowKeys",
                                  plasmicStateName: "table.selectedRowKeys"
                                }
                              ],
                              [],
                              RichTable_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <RichTable
                                data-plasmic-name={"table"}
                                data-plasmic-override={overrides.table}
                                {...child$Props}
                              />
                            );
                          })()
                        : null}
                      {(() => {
                        try {
                          return $queries.getContacts.isLoading;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__xTrNb)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </section>
              ) : null}
              {(() => {
                try {
                  return $state.radioGroup.value == "draft";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <section
                  className={classNames(projectcss.all, sty.section__xcFxf)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___9NgpV)}
                  >
                    {(() => {
                      try {
                        return $state.emailIdeas != undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(projectcss.all, sty.freeBox__uaF)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateEmailIdeas"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["emailIdeas"]
                                  },
                                  operation: 1
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, undefined);
                                  return undefined;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEmailIdeas"] != null &&
                            typeof $steps["updateEmailIdeas"] === "object" &&
                            typeof $steps["updateEmailIdeas"].then ===
                              "function"
                          ) {
                            $steps["updateEmailIdeas"] = await $steps[
                              "updateEmailIdeas"
                            ];
                          }
                        }}
                      >
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__fN1X
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hce0F
                            )}
                          >
                            {"Close"}
                          </div>
                        </AntdButton>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $state.currentEmail == "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ekCZx
                        )}
                      >
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1__cAMeK
                          )}
                        >
                          {"Generate Newsletter Ideas with AI"}
                        </h1>
                        {(() => {
                          const child$Props = {
                            allowClear: true,
                            className: classNames("__wab_instance", sty.input2),
                            onChange:
                              generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input2", "value"],
                                AntdInput_Helpers
                              ),
                            placeholder: "What do you want to write about?",
                            value: generateStateValueProp($state, [
                              "input2",
                              "value"
                            ])
                          };
                          initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input2.value"
                              }
                            ],
                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );

                          return (
                            <AntdInput
                              data-plasmic-name={"input2"}
                              data-plasmic-override={overrides.input2}
                              {...child$Props}
                            />
                          );
                        })()}
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button__fclse
                          )}
                          onClick={async () => {
                            const $steps = {};

                            $steps["updateIdeasLoading"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["ideasLoading"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIdeasLoading"] != null &&
                              typeof $steps["updateIdeasLoading"] ===
                                "object" &&
                              typeof $steps["updateIdeasLoading"].then ===
                                "function"
                            ) {
                              $steps["updateIdeasLoading"] = await $steps[
                                "updateIdeasLoading"
                              ];
                            }

                            $steps["httpPost"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "4GA1yTff1VZbFiSdCcXPGD",
                                      opId: "58ce0e43-2336-48ae-9277-d096201a232b",
                                      userArgs: {
                                        body: [
                                          500,
                                          [
                                            {
                                              role: "user",
                                              content:
                                                "You are tasked with generating 6 newsletter content ideas for a specific newsletter. Your goal is to create engaging and relevant ideas based on the provided information. Follow these instructions carefully: 1. Review the following newsletter information: <newsletter_topic>Automation Station</newsletter_topic> <past_newsletters for context>" +
                                                $queries.getEmails.data.map(
                                                  item => item.subject
                                                ) +
                                                "</past_newsletters for context> 2. Generate 10 unique content ideas that align with the newsletter's title, past newsletters contextand writing style but the ideas must be about this topic: <newsletter_topic>" +
                                                $state.input2.value +
                                                "</newsletter_topic>. Ensure that the ideas are distinct from the past newsletter topic. 3. For each idea, create: a) A straightforwad topic line for the newsletter. should adequately explain the content idea. Not flowery. Not a subject line for the email. It is not a marketing title b) 3 short content ideas related to the subject. 3 short sentences. 4. Present your output as a custom format. Each item in the list should follow this structure: <subject:title line for the newsletter,html_content:3 content ideas for the subject. must be a string NOT HTML> 5. Guidelines for creating content: - newsletter topic title should not be flowery and should be straight to the point- Tailor the ideas to the writer of the newsletter based on its title and topic. Do not number the output. do not add numbers to each item. Do not include any additional explanation or commentary outside of the output. EXAMPLE OUTPUT <subject: Enhance Customer Experience with Automated Loyalty Programs,html_content: Implement a digital loyalty program that rewards customers for repeat visits and purchases, Use automated SMS or push notifications to notify customers of special promotions or events, Integrate a CRM system to track customer preferences and personalize their experience>"
                                            }
                                          ]
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: [],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["httpPost"] != null &&
                              typeof $steps["httpPost"] === "object" &&
                              typeof $steps["httpPost"].then === "function"
                            ) {
                              $steps["httpPost"] = await $steps["httpPost"];
                            }

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        function parseStringToJsonArray(
                                          jsonString
                                        ) {
                                          let jsonArray = [];
                                          let entries = jsonString
                                            .split(/<subject:/)
                                            .filter(entry => entry.trim());
                                          entries.forEach(entry => {
                                            if (entry.trim()) {
                                              let match = entry.match(
                                                /(.*?),\s*html_content:(.*)/s
                                              );
                                              if (match) {
                                                let subject = match[1].trim();
                                                let html_content =
                                                  match[2].trim();
                                                jsonArray.push({
                                                  subject: subject,
                                                  html_content: html_content
                                                });
                                              }
                                            }
                                          });
                                          return jsonArray;
                                        }
                                        let jsonString =
                                          $steps.httpPost.data.response
                                            .choices[0].message.content;
                                        let jsonArray =
                                          parseStringToJsonArray(jsonString);
                                        return jsonArray;
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["updateEmailIdeas"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["emailIdeas"]
                                    },
                                    operation: 0,
                                    value: $steps.runCode
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateEmailIdeas"] != null &&
                              typeof $steps["updateEmailIdeas"] === "object" &&
                              typeof $steps["updateEmailIdeas"].then ===
                                "function"
                            ) {
                              $steps["updateEmailIdeas"] = await $steps[
                                "updateEmailIdeas"
                              ];
                            }

                            $steps["updateIdeasLoading2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["ideasLoading"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateIdeasLoading2"] != null &&
                              typeof $steps["updateIdeasLoading2"] ===
                                "object" &&
                              typeof $steps["updateIdeasLoading2"].then ===
                                "function"
                            ) {
                              $steps["updateIdeasLoading2"] = await $steps[
                                "updateIdeasLoading2"
                              ];
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cZB
                            )}
                          >
                            {"Generate"}
                          </div>
                        </AntdButton>
                        {(() => {
                          try {
                            return !$state.ideasLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aEyvT
                            )}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.emailIdeas;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gRirr
                                  )}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__h5ZWh
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.subject;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___78JzB
                                    )}
                                  >
                                    <div
                                      className={
                                        projectcss.__wab_expr_html_text
                                      }
                                      dangerouslySetInnerHTML={{
                                        __html: (() => {
                                          try {
                                            return (() => {
                                              function cleanHtmlContent(
                                                currentItem
                                              ) {
                                                let content =
                                                  currentItem.html_content;
                                                content = content.replace(
                                                  /^"+|"+$/g,
                                                  ""
                                                );
                                                content = content.replace(
                                                  />$/g,
                                                  ""
                                                );
                                                content = content.replace(
                                                  /(\d+\.\s)/g,
                                                  "\n$1"
                                                );
                                                content = content.trim();
                                                return content;
                                              }
                                              let cleanedContent =
                                                cleanHtmlContent(currentItem);
                                              return cleanedContent;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()
                                      }}
                                    />
                                  </div>
                                  <AntdButton
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__fHboP
                                    )}
                                    onClick={async () => {
                                      const $steps = {};

                                      $steps["updateEmails"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["emails"]
                                              },
                                              operation: 5,
                                              value: (() => {
                                                currentItem.status = "draft";
                                                currentItem.created_at =
                                                  new Date().toISOString();
                                                return currentItem;
                                              })()
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const arr = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              arr.push(value);
                                              return arr;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateEmails"] != null &&
                                        typeof $steps["updateEmails"] ===
                                          "object" &&
                                        typeof $steps["updateEmails"].then ===
                                          "function"
                                      ) {
                                        $steps["updateEmails"] = await $steps[
                                          "updateEmails"
                                        ];
                                      }

                                      $steps["updateEmailIdeas"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["emailIdeas"]
                                              },
                                              operation: 6,
                                              startIndex: (() => {
                                                try {
                                                  return currentIndex;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })(),
                                              deleteCount: 1
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const arr = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              arr.splice(
                                                startIndex,
                                                deleteCount
                                              );
                                              return arr;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateEmailIdeas"] != null &&
                                        typeof $steps["updateEmailIdeas"] ===
                                          "object" &&
                                        typeof $steps["updateEmailIdeas"]
                                          .then === "function"
                                      ) {
                                        $steps["updateEmailIdeas"] =
                                          await $steps["updateEmailIdeas"];
                                      }

                                      $steps["postgresCreate"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              dataOp: {
                                                sourceId:
                                                  "ha2fsp5qYJUuqWXEXDhA28",
                                                opId: "f50e23be-3661-4104-ae81-7e76bc00cb46",
                                                userArgs: {
                                                  variables: [
                                                    currentItem.html_content,
                                                    $queries.getParner.data[0]
                                                      .id,
                                                    currentItem.subject
                                                  ]
                                                },
                                                cacheKey: null,
                                                invalidatedKeys: [],
                                                roleId: null
                                              }
                                            };
                                            return (async ({
                                              dataOp,
                                              continueOnError
                                            }) => {
                                              try {
                                                const response =
                                                  await executePlasmicDataOp(
                                                    dataOp,
                                                    {
                                                      userAuthToken:
                                                        dataSourcesCtx?.userAuthToken,
                                                      user: dataSourcesCtx?.user
                                                    }
                                                  );
                                                await plasmicInvalidate(
                                                  dataOp.invalidatedKeys
                                                );
                                                return response;
                                              } catch (e) {
                                                if (!continueOnError) {
                                                  throw e;
                                                }
                                                return e;
                                              }
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["postgresCreate"] != null &&
                                        typeof $steps["postgresCreate"] ===
                                          "object" &&
                                        typeof $steps["postgresCreate"].then ===
                                          "function"
                                      ) {
                                        $steps["postgresCreate"] = await $steps[
                                          "postgresCreate"
                                        ];
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__enGle
                                      )}
                                    >
                                      {"Add to Drafts"}
                                    </div>
                                  </AntdButton>
                                </div>
                              );
                            })}
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $state.ideasLoading;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <IconIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__y74Zx
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    ) : null}
                  </div>
                </section>
              ) : null}
            </Stack__>
            <div className={classNames(projectcss.all, sty.column__xdikN)}>
              <div className={classNames(projectcss.all, sty.freeBox__ghJho)}>
                {(() => {
                  try {
                    return true;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <AntdRadioGroup
                    data-plasmic-name={"radioGroup"}
                    data-plasmic-override={overrides.radioGroup}
                    className={classNames("__wab_instance", sty.radioGroup)}
                    defaultValue={"scheduled"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "radioGroup",
                        "value"
                      ]).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};

                        $steps["updateCurrentEmail"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["currentEmail"]
                                },
                                operation: 0,
                                value: ""
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateCurrentEmail"] != null &&
                          typeof $steps["updateCurrentEmail"] === "object" &&
                          typeof $steps["updateCurrentEmail"].then ===
                            "function"
                        ) {
                          $steps["updateCurrentEmail"] = await $steps[
                            "updateCurrentEmail"
                          ];
                        }

                        $steps["updateEmailIdeas"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["emailIdeas"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEmailIdeas"] != null &&
                          typeof $steps["updateEmailIdeas"] === "object" &&
                          typeof $steps["updateEmailIdeas"].then === "function"
                        ) {
                          $steps["updateEmailIdeas"] = await $steps[
                            "updateEmailIdeas"
                          ];
                        }

                        $steps["updateInput2Value"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["input2", "value"]
                                },
                                operation: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, undefined);
                                return undefined;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateInput2Value"] != null &&
                          typeof $steps["updateInput2Value"] === "object" &&
                          typeof $steps["updateInput2Value"].then === "function"
                        ) {
                          $steps["updateInput2Value"] = await $steps[
                            "updateInput2Value"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    optionType={"button"}
                    options={(() => {
                      const __composite = [
                        { value: null, label: null },
                        { value: null, label: null },
                        { label: null, value: null }
                      ];
                      __composite["0"]["value"] = "scheduled";
                      __composite["0"]["label"] = "Scheduled";
                      __composite["1"]["value"] = "sent";
                      __composite["1"]["label"] = "Sent";
                      __composite["2"]["label"] = "Draft";
                      __composite["2"]["value"] = "draft";
                      return __composite;
                    })()}
                    value={generateStateValueProp($state, [
                      "radioGroup",
                      "value"
                    ])}
                  >
                    <AntdRadio
                      className={classNames("__wab_instance", sty.radio__h9Cy7)}
                      value={"op1"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jiLGc
                        )}
                      >
                        {"Option 1"}
                      </div>
                    </AntdRadio>
                    <AntdRadio
                      className={classNames("__wab_instance", sty.radio__iqp9D)}
                      value={"op2"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qm8K
                        )}
                      >
                        {"Option 2"}
                      </div>
                    </AntdRadio>
                  </AntdRadioGroup>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__c7QMe)}>
                {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                  (() => {
                    try {
                      return (() => {
                        function getFilteredEmails() {
                          const { emails, radioGroup, select } = $state;
                          const filteredByStatus = emails.filter(
                            entry => entry.status === radioGroup.value
                          );
                          const sortedByDate = filteredByStatus.sort(
                            (a, b) =>
                              new Date(b.created_at) - new Date(a.created_at)
                          );
                          const filteredByNewsletterId = sortedByDate.filter(
                            news => news.newsletter_id === select.value
                          );
                          return filteredByNewsletterId;
                        }
                        return getFilteredEmails();
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oso5E)}
                      key={currentIndex}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateCurrentEmail"] =
                          $state.radioGroup.value == "scheduled" || "draft"
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["currentEmail"]
                                  },
                                  operation: 0,
                                  value: currentItem.id
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateCurrentEmail"] != null &&
                          typeof $steps["updateCurrentEmail"] === "object" &&
                          typeof $steps["updateCurrentEmail"].then ===
                            "function"
                        ) {
                          $steps["updateCurrentEmail"] = await $steps[
                            "updateCurrentEmail"
                          ];
                        }
                      }}
                      title={``}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lEzSc
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                function formatScheduleTime(currentItem) {
                                  if (
                                    !currentItem ||
                                    !currentItem.schedule_time
                                  ) {
                                    return "Not Scheduled";
                                  }
                                  const date = new Date(
                                    currentItem.schedule_time
                                  );
                                  const options = {
                                    day: "2-digit",
                                    month: "short",
                                    year: "numeric",
                                    hour: "numeric",
                                    minute: "numeric",
                                    hour12: true
                                  };
                                  return date
                                    .toLocaleString("en-GB", options)
                                    .replace(",", "");
                                }
                                return formatScheduleTime(currentItem);
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return (
                            (currentItem.id == $state.currentEmail) == true
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3Odoz
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.subject;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            (currentItem.id == $state.currentEmail) == false
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pkJ1
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.subject;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      ) : null}
                    </div>
                  );
                })}
              </div>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__oqcg)}>
            <CalendarNew
              data-plasmic-name={"calendarNew"}
              data-plasmic-override={overrides.calendarNew}
              className={classNames("__wab_instance", sty.calendarNew)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hSmBv
              )}
            >
              {"Enter some text"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "select",
    "columns",
    "input",
    "timePicker",
    "richTextEditor",
    "calendar",
    "table",
    "input2",
    "radioGroup",
    "calendarNew"
  ],
  select: ["select"],
  columns: [
    "columns",
    "input",
    "timePicker",
    "richTextEditor",
    "calendar",
    "table",
    "input2",
    "radioGroup"
  ],
  input: ["input"],
  timePicker: ["timePicker"],
  richTextEditor: ["richTextEditor"],
  calendar: ["calendar"],
  table: ["table"],
  input2: ["input2"],
  radioGroup: ["radioGroup"],
  calendarNew: ["calendarNew"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  select: typeof AntdSelect;
  columns: "div";
  input: typeof AntdInput;
  timePicker: typeof AntdDatePicker;
  richTextEditor: typeof Quill;
  calendar: typeof RichCalendar;
  table: typeof RichTable;
  input2: typeof AntdInput;
  radioGroup: typeof AntdRadioGroup;
  calendarNew: typeof CalendarNew;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "hUezQ7Kcu4Vi3zRYfXUddy"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    select: makeNodeComponent("select"),
    columns: makeNodeComponent("columns"),
    input: makeNodeComponent("input"),
    timePicker: makeNodeComponent("timePicker"),
    richTextEditor: makeNodeComponent("richTextEditor"),
    calendar: makeNodeComponent("calendar"),
    table: makeNodeComponent("table"),
    input2: makeNodeComponent("input2"),
    radioGroup: makeNodeComponent("radioGroup"),
    calendarNew: makeNodeComponent("calendarNew"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
